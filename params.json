{
  "name": "Snap",
  "tagline": "OpenBSD upgrade tool (OpenBSD,Shell)",
  "body": "snap\r\n====\r\nOpenBSD upgrade script.\r\n\r\n- [Changes](#changes)\r\n- [Features](#features)\r\n- [Usage](#usage)\r\n- [.snaprc options and defaults](#snaprc-options-and-defaults)\r\n- [Examples](#examples)\r\n- [Sample .snaprc](#sample-snaprc)\r\n- [Installation](#installation)\r\n- [Verifying an Installation](#verifying-an-installation)\r\n- [Releases vs master](#releases-vs-master)\r\n\r\nChanges\r\n=======\r\n* 2016-02-03 : Add ability for snap to verify its integrity via [signify(1)](http://www.openbsd.org/cgi-bin/man.cgi?query=signify&apropos=0&sektion=0&manpath=OpenBSD+Current&arch=i386&format=html)!\r\n* 2015-04-07 : Remove pv support as [ftp(1)](http://www.openbsd.org/cgi-bin/man.cgi/OpenBSD-current/man1/ftp.1?query=ftp&arch=i386) can do the same job.\r\n* 2015-03-25 : Add ability for snap to update itself and run installboot.\r\n* 2014-09-26 : Pull in the fixes for etc and xetc set removal.\r\n\r\nFeatures\r\n========\r\n* Verify integrity of the snap script itself.\r\n* Upgrade to a release, or to snaps (Not recommended. Following faq/upgradeXX.html required!).\r\n* Store config options in an rc file.\r\n* Auto # cpu detection.\r\n* Auto detection of arch type for arm: OMAP, IMX (needs love!).\r\n* Signature verification of sets with [signify(1)](http://www.openbsd.org/cgi-bin/man.cgi?query=signify&apropos=0&sektion=0&manpath=OpenBSD+Current&arch=i386&format=html)\r\n\r\nUsage\r\n=====\r\n*  -s force snap to use snapshots.\r\n*  -S do not check signatures.\r\n*  -c specify location of config file (default is ~/.snaprc)\r\n*  -e just extract sets in DST.\r\n*  -m \\<machine\\> use \\<machine\\> instead of what 'machine' returns.\r\n*  -v \\<version\\> used to force snap to use \\<version\\> (examples: snapshots or 5.3).\r\n*  -V \\<setversion\\> used to force snap to use \\<setversion\\> for sets (example: -V 5.3). Note: this will only append 53 to sets, ie base53.tgz.\r\n*  -r run sysmerge after extracting {x}sets. (May dump core if the snapshots have introduced ABI changes. Not recommended.)\r\n*  -x do not extract x11 sets.\r\n*  -M specify a mirror to use (example: \" -M ftp3.usa.openbsd.org\")\r\n*  -I [full path to SHA256.sig file] verify integrity of snap.\r\n*  -i interactive with colors.\r\n*  -n force using bsd.mp as bsd.\r\n*  -k only install kernels and exit.\r\n*  -B do not backup current kernel.\r\n*  -u check for update to snap script.\r\n*  -U download new snap script (will replace currently installed version).\r\n*  -b device to install bootstrap to.\r\n*  -R reboot after installation.\r\n*  -h help.\r\n\r\n.snaprc options and defaults\r\n=======\r\n* **INTERACTIVE**: *false*\r\n* **DST**: */tmp/upgrade*\r\n* **EXTRACT_ONLY**: *false*\r\n* **FTP_OPTS**: *-V*\r\n* **MERGE**: *false*\r\n* **NO_X11**: *false*\r\n* **VER**: *uname -r*\r\n* **CHK_UPDATE**: *false*\r\n* **INS_UPDATE**: *false*\r\n* **INSTBOOT**: ** (no default, set to disk that has bootstrap installed, sd0 for example)\r\n* **REBOOT**: ** (no default, setting will cause a reboot once the upgrade is complete.)\r\n* **MIRROR**: *ftp3.usa.openbsd.org*\r\n* **AFTER**: ** (no default) script to be copied to `/etc/rc.firsttime`. This script should be kept in a safe place!\r\n\r\nExamples\r\n========\r\n  To update to the latest snapshot using an explicit mirror\r\n  region:\r\n\r\n    snap -s -M ftp3.usa.openbsd.org\r\n\r\n  To update to the lastest version of 5.3 without updating xsets:\r\n\r\n    snap -v 5.3 -V 5.3 -x -M ftp3.usa.openbsd.org\r\n\r\nSample .snaprc\r\n==============\r\n\r\n```\r\n INTERACTIVE:true\r\n DST:/tmp/upgrade\r\n MERGE:true\r\n MIRROR:ftp3.usa.openbsd.org\r\n NO_X11:true\r\n```\r\n\r\nSample AFTER script\r\n===================\r\n\r\nStored in `/etc/after_snap` with 0600 permissions.\r\n```\r\n#!/bin/sh\r\n(\r\n    cd /dev && sh MAKEDEV all\r\n    /usr/sbin/pkg_add -um # -m is needed to see progress in this context\r\n)    \r\n```\r\n\r\nLine from `~/.snaprc` would look like this: `AFTER:/etc/after_snap`\r\n\r\nInstallation\r\n============\r\n\r\n```\r\n# make install\r\n```\r\n\r\nVerifying an Installation\r\n=========================\r\n\r\n**WARNING: I have had to create new keys for signing snap. Please update your pub key!**\r\n\r\n`snap` now can be verified via [signify(1)](http://www.openbsd.org/cgi-bin/man.cgi?query=signify&apropos=0&sektion=0&manpath=OpenBSD+Current&arch=i386&format=html)!\r\n\r\nThe public key is as follows:\r\n\r\n```\r\nuntrusted comment: github.com/qbit/snap public key\r\nRWQVGN6sUjQQA5uYpANGLLKQMAERZ43otLePFSVqNFGGtf/qBez7G1WU\r\n```\r\n\r\nThe old public key is:\r\n```\r\nuntrusted comment: github.com/qbit/snap public key\r\nRWTKOAnI3kqGqY/1ungBemfzkDj4ImXuybf4sDZcCrNJywffIRDkK1qF\r\n```\r\n\r\nThe old old public key is:\r\n\r\n```\r\nuntrusted comment: github.com/qbit/snap public key\r\nRWQkqrbMjoywaLwJQf45TjtCLgtFPSEO7v/TBf01WRZjvl8NSy6rJ6Fe\r\n```\r\n\r\nVerification of the signature can be done with the following command (once the above key is added to `/etc/signify/snap.pub`):\r\n\r\n```\r\nsnap -I\r\n```\r\n\r\nor\r\n\r\n```\r\nsignify -C -p /etc/signify/snap.pub -x SHA256.sig snap\r\n```\r\n\r\nBut Aaron, how do I know I have the correct public key? Mirrors.\r\n\r\nThe key is also available on the following locations:\r\n\r\nPub Key:\r\n- [deftly.net](https://deftly.net/snap.pub)\r\n- [cobug.org](https://cobug.org/snap.pub)\r\n- [keybase.io signed gist](https://gist.github.com/qbit/21b3bfc88f50ebf5bd2a) signed using [my account](https://keybase.io/qbit)\r\n- [code.bolddaemon.com](http://code.bolddaemon.com/qbit/snap/src/master/snap.pub) the main repo for snap\r\n\r\nOld pub key:\r\n- [deftly.net](https://deftly.net/snap.pub.old)\r\n- [cobug.org](https://cobug.org/snap.pub.old)\r\n- [keybase.io signed gist](https://gist.github.com/qbit/1c4884883c38c79ce24d) signed using [my account](https://keybase.io/qbit)\r\n\r\nOld old pub key:\r\n- [deftly.net](https://deftly.net/snap.pub.old.old)\r\n- [cobug.org](https://cobug.org/snap.pub.old.old)\r\n- [keybase.io signed gist](https://gist.github.com/qbit/b0ed7d7cb6bac6b5afaf) signed using [my account](https://keybase.io/qbit)\r\n\r\nReleases vs master\r\n==================\r\n\r\nYou can run snap in `release` or `master` mode. `release` means the version string in the snap script is set to a number. `master`\r\nmeans it contains \"master\".\r\n\r\nThe difference comes to light when doing upgrades, `-U` on a release will only upgrade to newer releases, while `master` will\r\nalways download the latest snap from the master branch. Both are signed and can be verified with the `-I` option.\r\n\r\n`master` is to be considered experimental - similar to snapshots on OpenBSD. Experimental features will occasionally show up\r\nhere, but breakage should be minimal (I don't push to master until I have tested).\r\n",
  "google": "",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}